#!/bin/bash

GIT_ROOT=$(git rev-parse --show-toplevel)
CURRENT_BRANCH=$(git branch --show-current)
TOOLS_PATH=$GIT_ROOT/Tools

SWIFT_IMAGE=swift-planejador-linux
SWIFT_CONTAINER=$SWIFT_IMAGE-$CURRENT_BRANCH

SWIFTLINT_URL=https://github.com/realm/SwiftLint/releases/latest/download/swiftlint_linux.zip
OHMYZSH_URL=https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh


# Rebuild image and redo the container.
function reset {
    # avoid redownloading swiftlint and oh-my-zsh
    if [ ! -f "$TOOLS_PATH/swiftlint" ]; then
        wget -q --show-progress "$SWIFTLINT_URL" -O "$TOOLS_PATH/swiftlint.zip"
        unzip "$TOOLS_PATH/swiftlint.zip" swiftlint -d "$TOOLS_PATH"
        rm "$TOOLS_PATH/swiftlint.zip"

        chmod +rx "$TOOLS_PATH/swiftlint"
    fi
    if [ ! -f "$TOOLS_PATH/oh-my-zsh.sh" ]; then
        wget -q --show-progress "$OHMYZSH_URL" -O "$TOOLS_PATH/oh-my-zsh.sh"
    fi

    # build docker and container with binds for every folder/file
    docker build -t "$SWIFT_IMAGE" "$TOOLS_PATH"
    docker rm -f "$SWIFT_CONTAINER" > /dev/null

    docker create --expose 8080 -p 8080:8080 \
        -it $(binds) --workdir /app \
        --name "$SWIFT_CONTAINER" "$SWIFT_IMAGE"
}

# generate bind list for every file in $GIT_ROOT, except the '.build' and 'Tools' folders
function binds {
    for file in $(ls -A1 "$GIT_ROOT"); do
        if echo $file | grep -qsFi '.build'; then
            continue
        elif echo $file | grep -qsFi 'Tools'; then
            continue
        fi

        echo '--mount' type=bind,source="$GIT_ROOT/$file",destination="/app/$file"
    done
}

# Run the current container
function run {
    # rebuild everything if the container is missing
    if ! docker ps --all | grep -qsF "$SWIFT_CONTAINER"; then
        reset
    fi

    docker start "$SWIFT_CONTAINER" > /dev/null
    docker exec -it "$SWIFT_CONTAINER" ${@:-/bin/zsh}
}

# When the special option "--reset" is given, rebuild everything
ARGUMENTS=($@)
case "$1" in
    "--reset")
        reset
        run ${ARGUMENTS[@]:1}
        ;;
    *)
        run ${ARGUMENTS[@]}
        ;;
esac
